[["week-5--welcome-to-the-r-environment.html", " 6 Week 5- Welcome to the R environment! 6.1 Lesson 1: Orientation to R 6.2 Manipulating a vector object 6.3 Operations act on each element of a vector: 6.4 Operations can also work with two vectors: 6.5 A few tips below for working with objects: 6.6 Practice R Operations 6.7 Characterizing a dataframe 6.8 How to access parts of the data: 6.9 Data Manipulation 6.10 Practice exploring a dataframe 6.11 Subsetting datasets &amp; logicals 6.12 Group Work Activity: Practice Exploring Data in R Class Exercises: Solutions Exercise 1: Solution Exercise 2: Solution", " 6 Week 5- Welcome to the R environment! This lesson is modified from materials compiled by Serena Caplins from the STEMinist_R lessons produced by several UC Davis graduate student and which can be found here. 6.1 Lesson 1: Orientation to R First let’s navigate to our R studio on Farm OnDemand! After we start it up we will want to create a new file called “Week5-IntroR.R” to type our scripts for today. Slides for this week are found here: X R can be used for basic arithmetic: 5+10+23 ## [1] 38 It can also store values in variables: You can assign an object using an assignment operator &lt;- or =. number&lt;-10 numbers&lt;-c(10, 11, 12, 14, 16) You can see your assigned object by typing the name you gave it. number ## [1] 10 numbers ## [1] 10 11 12 14 16 Objects can be numbers or characters: cat&lt;-&quot;meow&quot; dog&lt;-&quot;woof&quot; We can use colons to get sequences of numbers: n&lt;-1:100 Vectors can also include characters (in quotes): c()=concatenate, aka link things together! animals&lt;-c(&quot;woof&quot;, &quot;meow&quot;, &quot;hiss&quot;, &quot;baa&quot;) 6.2 Manipulating a vector object We can get summaries of vectors with summary() summary(n) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.00 25.75 50.50 50.50 75.25 100.00 We can see how long a vector is with length() length(n) ## [1] 100 You can use square brackets [] to get parts of vectors. n[50] ## [1] 50 6.3 Operations act on each element of a vector: # +2 numbers+2 ## [1] 12 13 14 16 18 # *2 numbers*2 ## [1] 20 22 24 28 32 # mean mean(numbers) ## [1] 12.6 # ^2 numbers^2 ## [1] 100 121 144 196 256 # sum sum(numbers) ## [1] 63 6.4 Operations can also work with two vectors: #define a new object y y&lt;-numbers*2 # n + y numbers + y ## [1] 30 33 36 42 48 # n * y numbers * y ## [1] 200 242 288 392 512 6.5 A few tips below for working with objects: We can keep track of what objects R is using, with the functions ls() and objects() ls() ## [1] &quot;animals&quot; &quot;cat&quot; &quot;dog&quot; &quot;n&quot; &quot;number&quot; &quot;numbers&quot; &quot;y&quot; objects() #returns the same results as ls() in this case. because we only have objects in our environment. ## [1] &quot;animals&quot; &quot;cat&quot; &quot;dog&quot; &quot;n&quot; &quot;number&quot; &quot;numbers&quot; &quot;y&quot; # how to get help for a function; you can also write help() ?ls # you can get rid of objects you don&#39;t want rm(numbers) # and make sure it got rid of them ls() ## [1] &quot;animals&quot; &quot;cat&quot; &quot;dog&quot; &quot;n&quot; &quot;number&quot; &quot;y&quot; Call the help files for the functions ls() and rm() + What are the arguments for the ls() function? + What does the ‘sorted’ argument do? ?ls #From the help file: sorted is a logical indicating if the resulting character should be sorted alphabetically. Note that this is part of ls() may take most of the time. 6.6 Practice R Operations Class Exercise 1 Create a numeric vector in the command line containing: the numbers 2, 9, 3, 8, and 3 and assign this vector to a global variable x. Perform arithmetic with x. Convince yourself R works as a calculator, and knows order of operations. Multiply x by 10, and save the result as a new object named y Calculate the difference in the sum of the x vector and the sum of the y vector 6.7 Characterizing a dataframe We’ll now move from working with objects and vectors to working with dataframes: Here are a few useful functions: install.packages() library() data() str() dim() colnames() and rownames() class() as.factor() as.numeric() unique() t() max(), min(), mean() and summary() We’re going to use data on sleep patterns in mammals. This requires installing a package (ggplot2) and loading the data Install the package ggplot2. This only has to be done once and after installation we should then comment out the command to install the package with a #. #install.packages(&quot;ggplot2&quot;) #load the package library (ggplot2) Load the data (it’s called msleep). data(&quot;msleep&quot;) There are many functions in R that allow us to get an idea of what the data looks like. For example, what are it’s dimensions (how many rows and columns)? # head() -look at the beginning of the data file # tail() -look at the end of the data file head(msleep) ## # A tibble: 6 × 11 ## name genus vore order conservation sleep_total sleep_rem sleep_cycle awake ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Cheetah Acin… carni Carn… lc 12.1 NA NA 11.9 ## 2 Owl mo… Aotus omni Prim… &lt;NA&gt; 17 1.8 NA 7 ## 3 Mounta… Aplo… herbi Rode… nt 14.4 2.4 NA 9.6 ## 4 Greate… Blar… omni Sori… lc 14.9 2.3 0.133 9.1 ## 5 Cow Bos herbi Arti… domesticated 4 0.7 0.667 20 ## 6 Three-… Brad… herbi Pilo… &lt;NA&gt; 14.4 2.2 0.767 9.6 ## # ℹ 2 more variables: brainwt &lt;dbl&gt;, bodywt &lt;dbl&gt; tail(msleep) ## # A tibble: 6 × 11 ## name genus vore order conservation sleep_total sleep_rem sleep_cycle awake ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Tenrec Tenr… omni Afro… &lt;NA&gt; 15.6 2.3 NA 8.4 ## 2 Tree s… Tupa… omni Scan… &lt;NA&gt; 8.9 2.6 0.233 15.1 ## 3 Bottle… Turs… carni Ceta… &lt;NA&gt; 5.2 NA NA 18.8 ## 4 Genet Gene… carni Carn… &lt;NA&gt; 6.3 1.3 NA 17.7 ## 5 Arctic… Vulp… carni Carn… &lt;NA&gt; 12.5 NA NA 11.5 ## 6 Red fox Vulp… carni Carn… &lt;NA&gt; 9.8 2.4 0.35 14.2 ## # ℹ 2 more variables: brainwt &lt;dbl&gt;, bodywt &lt;dbl&gt; # str() str(msleep) ## tibble [83 × 11] (S3: tbl_df/tbl/data.frame) ## $ name : chr [1:83] &quot;Cheetah&quot; &quot;Owl monkey&quot; &quot;Mountain beaver&quot; &quot;Greater short-tailed shrew&quot; ... ## $ genus : chr [1:83] &quot;Acinonyx&quot; &quot;Aotus&quot; &quot;Aplodontia&quot; &quot;Blarina&quot; ... ## $ vore : chr [1:83] &quot;carni&quot; &quot;omni&quot; &quot;herbi&quot; &quot;omni&quot; ... ## $ order : chr [1:83] &quot;Carnivora&quot; &quot;Primates&quot; &quot;Rodentia&quot; &quot;Soricomorpha&quot; ... ## $ conservation: chr [1:83] &quot;lc&quot; NA &quot;nt&quot; &quot;lc&quot; ... ## $ sleep_total : num [1:83] 12.1 17 14.4 14.9 4 14.4 8.7 7 10.1 3 ... ## $ sleep_rem : num [1:83] NA 1.8 2.4 2.3 0.7 2.2 1.4 NA 2.9 NA ... ## $ sleep_cycle : num [1:83] NA NA NA 0.133 0.667 ... ## $ awake : num [1:83] 11.9 7 9.6 9.1 20 9.6 15.3 17 13.9 21 ... ## $ brainwt : num [1:83] NA 0.0155 NA 0.00029 0.423 NA NA NA 0.07 0.0982 ... ## $ bodywt : num [1:83] 50 0.48 1.35 0.019 600 ... dim(), ncol(), nrow()- dimensions, number of columns, number of rows colnames(), rownames() - column names, row names Rstudio also allows us to just look into the data file with View() 6.8 How to access parts of the data: We can also look at a single column at a time. There are three ways to access this: $, [,#] or [,“a”]. Quick Tip: Think about “rc cola” or “remote control car” to remember that [5,] means fifth row and [,5] means fifth column! Each way has it’s own advantages: msleep[,3] ## # A tibble: 83 × 1 ## vore ## &lt;chr&gt; ## 1 carni ## 2 omni ## 3 herbi ## 4 omni ## 5 herbi ## 6 herbi ## 7 carni ## 8 &lt;NA&gt; ## 9 carni ## 10 herbi ## # ℹ 73 more rows msleep[, &quot;vore&quot;] ## # A tibble: 83 × 1 ## vore ## &lt;chr&gt; ## 1 carni ## 2 omni ## 3 herbi ## 4 omni ## 5 herbi ## 6 herbi ## 7 carni ## 8 &lt;NA&gt; ## 9 carni ## 10 herbi ## # ℹ 73 more rows msleep$vore ## [1] &quot;carni&quot; &quot;omni&quot; &quot;herbi&quot; &quot;omni&quot; &quot;herbi&quot; &quot;herbi&quot; &quot;carni&quot; ## [8] NA &quot;carni&quot; &quot;herbi&quot; &quot;herbi&quot; &quot;herbi&quot; &quot;omni&quot; &quot;herbi&quot; ## [15] &quot;omni&quot; &quot;omni&quot; &quot;omni&quot; &quot;carni&quot; &quot;herbi&quot; &quot;omni&quot; &quot;herbi&quot; ## [22] &quot;insecti&quot; &quot;herbi&quot; &quot;herbi&quot; &quot;omni&quot; &quot;omni&quot; &quot;herbi&quot; &quot;carni&quot; ## [29] &quot;omni&quot; &quot;herbi&quot; &quot;carni&quot; &quot;carni&quot; &quot;herbi&quot; &quot;omni&quot; &quot;herbi&quot; ## [36] &quot;herbi&quot; &quot;carni&quot; &quot;omni&quot; &quot;herbi&quot; &quot;herbi&quot; &quot;herbi&quot; &quot;herbi&quot; ## [43] &quot;insecti&quot; &quot;herbi&quot; &quot;carni&quot; &quot;herbi&quot; &quot;carni&quot; &quot;herbi&quot; &quot;herbi&quot; ## [50] &quot;omni&quot; &quot;carni&quot; &quot;carni&quot; &quot;carni&quot; &quot;omni&quot; NA &quot;omni&quot; ## [57] NA NA &quot;carni&quot; &quot;carni&quot; &quot;herbi&quot; &quot;insecti&quot; NA ## [64] &quot;herbi&quot; &quot;omni&quot; &quot;omni&quot; &quot;insecti&quot; &quot;herbi&quot; NA &quot;herbi&quot; ## [71] &quot;herbi&quot; &quot;herbi&quot; NA &quot;omni&quot; &quot;insecti&quot; &quot;herbi&quot; &quot;herbi&quot; ## [78] &quot;omni&quot; &quot;omni&quot; &quot;carni&quot; &quot;carni&quot; &quot;carni&quot; &quot;carni&quot; Sometimes it is useful to know what class() the column is: class(msleep$vore) ## [1] &quot;character&quot; class(msleep$sleep_total) ## [1] &quot;numeric&quot; We can also look at a single row at a time. There are two ways to access this: 1. by indicating the row number in square brackets next to the name of the dataframe name[#,] and by calling the actual name of the row (if your rows have names) name[\"a\",]. msleep[43,] ## # A tibble: 1 × 11 ## name genus vore order conservation sleep_total sleep_rem sleep_cycle awake ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Little… Myot… inse… Chir… &lt;NA&gt; 19.9 2 0.2 4.1 ## # ℹ 2 more variables: brainwt &lt;dbl&gt;, bodywt &lt;dbl&gt; msleep[msleep$name == &quot;Mountain beaver&quot;,] ## # A tibble: 1 × 11 ## name genus vore order conservation sleep_total sleep_rem sleep_cycle awake ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Mounta… Aplo… herbi Rode… nt 14.4 2.4 NA 9.6 ## # ℹ 2 more variables: brainwt &lt;dbl&gt;, bodywt &lt;dbl&gt; We can select more than one row or column at a time: # see two columns msleep[,c(1, 6)] ## # A tibble: 83 × 2 ## name sleep_total ## &lt;chr&gt; &lt;dbl&gt; ## 1 Cheetah 12.1 ## 2 Owl monkey 17 ## 3 Mountain beaver 14.4 ## 4 Greater short-tailed shrew 14.9 ## 5 Cow 4 ## 6 Three-toed sloth 14.4 ## 7 Northern fur seal 8.7 ## 8 Vesper mouse 7 ## 9 Dog 10.1 ## 10 Roe deer 3 ## # ℹ 73 more rows # and make a new data frame from these subsets subsleep&lt;-msleep[,c(1, 6)] But what if we actually care about how many unique things are in a column? # unique() unique(msleep[, &quot;order&quot;]) ## # A tibble: 19 × 1 ## order ## &lt;chr&gt; ## 1 Carnivora ## 2 Primates ## 3 Rodentia ## 4 Soricomorpha ## 5 Artiodactyla ## 6 Pilosa ## 7 Cingulata ## 8 Hyracoidea ## 9 Didelphimorphia ## 10 Proboscidea ## 11 Chiroptera ## 12 Perissodactyla ## 13 Erinaceomorpha ## 14 Cetacea ## 15 Lagomorpha ## 16 Diprotodontia ## 17 Monotremata ## 18 Afrosoricida ## 19 Scandentia # table() table(msleep$order) ## ## Afrosoricida Artiodactyla Carnivora Cetacea Chiroptera ## 1 6 12 3 2 ## Cingulata Didelphimorphia Diprotodontia Erinaceomorpha Hyracoidea ## 2 2 2 2 3 ## Lagomorpha Monotremata Perissodactyla Pilosa Primates ## 1 1 3 1 12 ## Proboscidea Rodentia Scandentia Soricomorpha ## 2 22 1 5 # levels(), if class is factor (and if not we can make it a factor) levels(as.factor(msleep$order)) ## [1] &quot;Afrosoricida&quot; &quot;Artiodactyla&quot; &quot;Carnivora&quot; &quot;Cetacea&quot; ## [5] &quot;Chiroptera&quot; &quot;Cingulata&quot; &quot;Didelphimorphia&quot; &quot;Diprotodontia&quot; ## [9] &quot;Erinaceomorpha&quot; &quot;Hyracoidea&quot; &quot;Lagomorpha&quot; &quot;Monotremata&quot; ## [13] &quot;Perissodactyla&quot; &quot;Pilosa&quot; &quot;Primates&quot; &quot;Proboscidea&quot; ## [17] &quot;Rodentia&quot; &quot;Scandentia&quot; &quot;Soricomorpha&quot; 6.9 Data Manipulation If your data is transposed in a way that isn’t useful to you, you can switch it. Note that this often changes the class of each column! In R, each column must have the same type of data: # t() tr_msleep&lt;-t(msleep) str(tr_msleep) ## chr [1:11, 1:83] &quot;Cheetah&quot; &quot;Acinonyx&quot; &quot;carni&quot; &quot;Carnivora&quot; &quot;lc&quot; &quot;12.1&quot; NA ... ## - attr(*, &quot;dimnames&quot;)=List of 2 ## ..$ : chr [1:11] &quot;name&quot; &quot;genus&quot; &quot;vore&quot; &quot;order&quot; ... ## ..$ : NULL It’s important to know the class of data if you want to manipulate it. For example, you can’t add characters. msleep contains several different types of data. Some common classes are: factors, numeric, integers, characters, logical # class() class(msleep) ## [1] &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; # str() str(msleep) ## tibble [83 × 11] (S3: tbl_df/tbl/data.frame) ## $ name : chr [1:83] &quot;Cheetah&quot; &quot;Owl monkey&quot; &quot;Mountain beaver&quot; &quot;Greater short-tailed shrew&quot; ... ## $ genus : chr [1:83] &quot;Acinonyx&quot; &quot;Aotus&quot; &quot;Aplodontia&quot; &quot;Blarina&quot; ... ## $ vore : chr [1:83] &quot;carni&quot; &quot;omni&quot; &quot;herbi&quot; &quot;omni&quot; ... ## $ order : chr [1:83] &quot;Carnivora&quot; &quot;Primates&quot; &quot;Rodentia&quot; &quot;Soricomorpha&quot; ... ## $ conservation: chr [1:83] &quot;lc&quot; NA &quot;nt&quot; &quot;lc&quot; ... ## $ sleep_total : num [1:83] 12.1 17 14.4 14.9 4 14.4 8.7 7 10.1 3 ... ## $ sleep_rem : num [1:83] NA 1.8 2.4 2.3 0.7 2.2 1.4 NA 2.9 NA ... ## $ sleep_cycle : num [1:83] NA NA NA 0.133 0.667 ... ## $ awake : num [1:83] 11.9 7 9.6 9.1 20 9.6 15.3 17 13.9 21 ... ## $ brainwt : num [1:83] NA 0.0155 NA 0.00029 0.423 NA NA NA 0.07 0.0982 ... ## $ bodywt : num [1:83] 50 0.48 1.35 0.019 600 ... Often we want to summarize data. There are many ways of doing this in R: # calculate mean() of a column mean(msleep$sleep_total) ## [1] 10.43373 # max() max(msleep$sleep_total) ## [1] 19.9 # min() min(msleep$sleep_total) ## [1] 1.9 # summary() summary(msleep$sleep_total) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.90 7.85 10.10 10.43 13.75 19.90 Sometimes, the values we care about aren’t provided in a data set. When this happens, we can create a new column that contains the values we’re interested in: # what if what we cared about was our sleep_total/sleep_rem ratio? # add a sleep_total/sleep_rem ratio column to our msleep dataframe with $ msleep$total_rem&lt;-msleep$sleep_total/msleep$sleep_rem # look at our dataframe again. It now contains 12 columns, one of them being the one we just created. head(msleep) ## # A tibble: 6 × 12 ## name genus vore order conservation sleep_total sleep_rem sleep_cycle awake ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Cheetah Acin… carni Carn… lc 12.1 NA NA 11.9 ## 2 Owl mo… Aotus omni Prim… &lt;NA&gt; 17 1.8 NA 7 ## 3 Mounta… Aplo… herbi Rode… nt 14.4 2.4 NA 9.6 ## 4 Greate… Blar… omni Sori… lc 14.9 2.3 0.133 9.1 ## 5 Cow Bos herbi Arti… domesticated 4 0.7 0.667 20 ## 6 Three-… Brad… herbi Pilo… &lt;NA&gt; 14.4 2.2 0.767 9.6 ## # ℹ 3 more variables: brainwt &lt;dbl&gt;, bodywt &lt;dbl&gt;, total_rem &lt;dbl&gt; 6.10 Practice exploring a dataframe Class Exercise 2 Reminder of those useful commands: dataframename[row , col], str(), dim(), nrow(), unique(), length(), rownames(), summary(), min(), max(), mean(), range(), levels(), factor(), as.factor(), class(), ncol(), nrow(), table(), sum(), quantile(), var() We’ll use the built-in ‘iris’ dataset. the command: data(iris) # this loads the ‘iris’ dataset. You can view more information &gt; about this dataset with help(iris) or ?iris How many rows are in the dataset? What are three distinct ways to figure this out? How many species of flowers are in the dataset? What class is ‘iris’ ? How many columns does this data frame have? What are their names? What class did R assign to each column? Now for writing your own commands. Assign the first flower’s petal’s width and length to new objects called setosa1.petalwidth and setosa1.petallength. Then Calculate the approximate area of the petal of the first flower, setosa1 (assume petal area can be approximated by a rectangle). Next, calculate the petal area of each flower in the iris dataset and assign this to a new column named PetalArea. What is the maximum sepal length of the irises? What about the minimum, median and average sepal length among all flowers in the dataset? 6.11 Subsetting datasets &amp; logicals A few useful commands: equals ==, does not equal !=, greater than &gt;, less than &lt;, and &amp;, and a pipe which can also indicate “and” |. Reminder there are two assignment operators in R &lt;- and a single equals sign =. The one you use really depends on how you learned to use R, and are otherwise equivalent. Logical conditions vs. assignment operators: Logical values of TRUE and FALSE are special in R. What class is a logical value? TRUE ## [1] TRUE FALSE ## [1] FALSE # what class is a logical value? class(TRUE) ## [1] &quot;logical&quot; Logical values are stored as 0 for FALSE and 1 for TRUE. Which means you can do math with them! TRUE + 1 ## [1] 2 FALSE + 1 ## [1] 1 sum(c(TRUE,TRUE,FALSE,FALSE)) ## [1] 2 !TRUE ## [1] FALSE !c(TRUE,TRUE,FALSE,FALSE) ## [1] FALSE FALSE TRUE TRUE Logicals will be the output of various tests: 1 == 1 ## [1] TRUE 1 == 2 ## [1] FALSE # does not equal 1 != 1 ## [1] FALSE 1 != 2 ## [1] TRUE # greater than 1 &gt; 1 ## [1] FALSE 1 &gt;= 1 ## [1] TRUE # less than 1 &lt; 3 ## [1] TRUE # combining logical conditions with and (&amp;), or(|) 1 == 1 &amp; 2 == 2 ## [1] TRUE 1 == 1 &amp; 1 == 2 ## [1] FALSE 1 == 1 | 1 == 2 ## [1] TRUE # we can take the opposite of a logical by using ! !TRUE ## [1] FALSE This is very useful because we can use logicals to query a data frame or vector. # Which numbers in 1:10 are greater than 3? 1:10 &gt; 3 ## [1] FALSE FALSE FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE # How many numbers in 1:10 are greater than 3? sum(1:10 &gt; 3) ## [1] 7 # in our msleep data frame, which species have total sleep greater than 18 hours? # reload the msleep data with library(ggplot2) and data(msleep) if you need to msleep[,&quot;sleep_total&quot;]&gt;18 ## sleep_totalsing which() to identify which rows match the logical values (TRUE) and length to count how many species there are which(msleep[,&quot;sleep_total&quot;]&gt;18) #22 37 43 62 --&gt; the rows that contain organisms that sleep more than 18 hrs ## [1] 22 37 43 62 length(which(msleep[,&quot;sleep_total&quot;]&gt;18)) #4 --&gt; number of species that sleep more than 18 hrs ## [1] 4 # which four species are these? msleep[which(msleep[,&quot;sleep_total&quot;]&gt;18),] ## # A tibble: 4 × 12 ## name genus vore order conservation sleep_total sleep_rem sleep_cycle awake ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Big br… Epte… inse… Chir… lc 19.7 3.9 0.117 4.3 ## 2 Thick-… Lutr… carni Dide… lc 19.4 6.6 NA 4.6 ## 3 Little… Myot… inse… Chir… &lt;NA&gt; 19.9 2 0.2 4.1 ## 4 Giant … Prio… inse… Cing… en 18.1 6.1 NA 5.9 ## # ℹ 3 more variables: brainwt &lt;dbl&gt;, bodywt &lt;dbl&gt;, total_rem &lt;dbl&gt; # what if we only want to see the bats that sleep more than 18 hours per 24 hour period? msleep[which(msleep[,&quot;sleep_total&quot;]&gt;18 &amp; msleep[,&quot;order&quot;] == &quot;Chiroptera&quot;),] ## # A tibble: 2 × 12 ## name genus vore order conservation sleep_total sleep_rem sleep_cycle awake ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Big br… Epte… inse… Chir… lc 19.7 3.9 0.117 4.3 ## 2 Little… Myot… inse… Chir… &lt;NA&gt; 19.9 2 0.2 4.1 ## # ℹ 3 more variables: brainwt &lt;dbl&gt;, bodywt &lt;dbl&gt;, total_rem &lt;dbl&gt; 6.12 Group Work Activity: Practice Exploring Data in R We are going to use the same iris dataset for our class activity this week and explore it more. Include copied text from your R script in your submission and answers to the following questions. Remember you can work in groups but everything is submitted individually. Go back to the iris dataset, which can be loaded with data(iris) Q1. How many irises have sepals less than 5.5 cm? Q2. Which iris individual has the largest petal length? What is the width of it’s petal? Q3. How many of the irises are in this dataset belong to the species versicolor? Q4. How many irises have petals longer than 6cm? Then create a vector of species name for each iris with sepals longer than 6cm. Q5. How many irises have sepals shorter than 5cm, but wider than 3cm? Q6. How many irises have petals narrower than 0.2cm or shorter than 1.5cm? Q7. What is the average width of setosa iris sepals that are longer than 5cm? Q8. What is the difference between the longest and shortest petal lengths of the species virginica? Q9. What proportion of flowers in the dataset have petals wider than 1cm? Q10. Okay final step! Create a new column within your dataframe, called sepalCategory, and set all values equal to ‘long’ Subset short values of this column, and set their values to ‘short’ (Short sepals are those less than 5.5 cm) How many plants with short sepals are there? How many long? Class Exercise Solutions Class Exercises: Solutions Exercise 1: Solution x &lt;- c(2, 9, 3, 8, 3) x * 20 ## [1] 40 180 60 160 60 x + 4 * 24 ## [1] 98 105 99 104 99 y &lt;- x * 10 sum(x) - sum(y) ## [1] -225 Exercise 2: Solution #Week 5 practice script data(iris) nrow(iris) #can also use nrows, str and dim ## [1] 150 levels(iris$Species) ## [1] &quot;setosa&quot; &quot;versicolor&quot; &quot;virginica&quot; class(iris) ## [1] &quot;data.frame&quot; colnames(iris) ## [1] &quot;Sepal.Length&quot; &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; &quot;Species&quot; str(iris) #look at structure ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... #Assign the first flower&#39;s petal&#39;s width and length to new objects called setosa1.petalwidth and setosa1.petallength. Then Calculate the approximate area of the petal of the first flower, setosa1 (assume petal area can be approximated by a rectangle). setosa1.petalwidth&lt;-iris[1,2] setosa1.petallength&lt;-iris[1,3] #area of petal of the first flower setosa1area2&lt;-setosa1.petalwidth*setosa1.petallength #petal area of each flower iris$PetalArea&lt;-iris$Petal.Length*iris$Petal.Width #max sepal length max(iris$Sepal.Length) ## [1] 7.9 #minimum sepal length min(iris$Sepal.Length) ## [1] 4.3 #average sepal length mean(iris$Sepal.Length) ## [1] 5.843333 #median sepal length median(iris$Sepal.Length) ## [1] 5.8 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
