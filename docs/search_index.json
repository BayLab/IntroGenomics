[["week-6--plotting-in-r.html", " 7 Week 6- Plotting in R 7.1 Main Objectives 7.2 Subsetting datasets &amp; logicals 7.3 Plotting in Base R Explore this dataset of chick weight and identify: 7.4 Plotting with ggplot2 7.5 For loops and the apply family of functions 7.6 Group Work Activity: Palmer Penguins! 7.7 Key Points Class Exercises: Solutions Exercise 1 Exercise 2 Exercise 3", " 7 Week 6- Plotting in R We’re again drawing some of this material from the STEMinist_R materials which can be found here We will also be talking a lot about figures and how to make and interpret figures in the lecture slides here: Week 6 Slides) 7.1 Main Objectives Learn how to subset dataframes and how to use logicals Learn how to make various plots in R, including histograms, scatterplots and boxplots, as well as learn how to customize those plots Learn useful commands in R including points(), lines(), abline(), hist(), boxplot() and plot() -Learn how to use arguments within plot(): main, xlab, ylab, col, pch, cex Start by making a new R script titled Week 6- plotting so that you can follow along with today’s code! We will again work with the sleep dataset on sleep patterns in mammals. This requires installing a package (ggplot2) and loading the data (msleep). This dataset includes information about mammal sleep times and weights that was taken from a study by V. M. Savage and G. B. West. “A quantitative, theoretical framework for understanding mammalian sleep. Proceedings of the National Academy of Sciences, 104 (3):1051-1056, 2007.” The data includes name (common name), genus, vore (carnivore, omnivore, etc), order, conservation (status), sleep_total (total amount of sleep in hours), sleep_rem (rem sleep in hours), sleep_cycle (length of sleep cycle, in hours), awake (amount of time spent awake, in hours), brainwt (brain weight in kilograms) and bodywt (body weight in kilograms). library(ggplot2) data(msleep) 7.2 Subsetting datasets &amp; logicals A few useful commands: equals ==, does not equal !=, greater than &gt;, less than &lt;, and &amp;, and a pipe which can also indicate “and” |. Reminder there are two assignment operators in R &lt;- and a single equals sign =. The one you use really depends on how you learned to use R, and are otherwise equivalent. Logical conditions vs. assignment operators: Logical values of TRUE and FALSE are special in R. What class is a logical value? TRUE #&gt; [1] TRUE FALSE #&gt; [1] FALSE # what class is a logical value? class(TRUE) #&gt; [1] &quot;logical&quot; Logical values are stored as 0 for FALSE and 1 for TRUE. Which means you can do math with them! TRUE + 1 #&gt; [1] 2 FALSE + 1 #&gt; [1] 1 sum(c(TRUE,TRUE,FALSE,FALSE)) #&gt; [1] 2 !TRUE #&gt; [1] FALSE !c(TRUE,TRUE,FALSE,FALSE) #&gt; [1] FALSE FALSE TRUE TRUE Logicals will be the output of various tests: 1 == 1 #&gt; [1] TRUE 1 == 2 #&gt; [1] FALSE # does not equal 1 != 1 #&gt; [1] FALSE 1 != 2 #&gt; [1] TRUE # greater than 1 &gt; 1 #&gt; [1] FALSE 1 &gt;= 1 #&gt; [1] TRUE # less than 1 &lt; 3 #&gt; [1] TRUE # combining logical conditions with and (&amp;), or(|) 1 == 1 &amp; 2 == 2 #&gt; [1] TRUE 1 == 1 &amp; 1 == 2 #&gt; [1] FALSE 1 == 1 | 1 == 2 #&gt; [1] TRUE # we can take the opposite of a logical by using ! !TRUE #&gt; [1] FALSE This is very useful because we can use logicals to query a data frame or vector. # in our msleep data frame, which species have total sleep greater than 18 hours? # reload the msleep data with library(ggplot2) and data(msleep) if you need to msleep[,&quot;sleep_total&quot;]&gt;18 #&gt; sleep_total #&gt; [1,] FALSE #&gt; [2,] FALSE #&gt; [3,] FALSE #&gt; [4,] FALSE #&gt; [5,] FALSE #&gt; [6,] FALSE #&gt; [7,] FALSE #&gt; [8,] FALSE #&gt; [9,] FALSE #&gt; [10,] FALSE #&gt; [11,] FALSE #&gt; [12,] FALSE #&gt; [13,] FALSE #&gt; [14,] FALSE #&gt; [15,] FALSE #&gt; [16,] FALSE #&gt; [17,] FALSE #&gt; [18,] FALSE #&gt; [19,] FALSE #&gt; [20,] FALSE #&gt; [21,] FALSE #&gt; [22,] TRUE #&gt; [23,] FALSE #&gt; [24,] FALSE #&gt; [25,] FALSE #&gt; [26,] FALSE #&gt; [27,] FALSE #&gt; [28,] FALSE #&gt; [29,] FALSE #&gt; [30,] FALSE #&gt; [31,] FALSE #&gt; [32,] FALSE #&gt; [33,] FALSE #&gt; [34,] FALSE #&gt; [35,] FALSE #&gt; [36,] FALSE #&gt; [37,] TRUE #&gt; [38,] FALSE #&gt; [39,] FALSE #&gt; [40,] FALSE #&gt; [41,] FALSE #&gt; [42,] FALSE #&gt; [43,] TRUE #&gt; [44,] FALSE #&gt; [45,] FALSE #&gt; [46,] FALSE #&gt; [47,] FALSE #&gt; [48,] FALSE #&gt; [49,] FALSE #&gt; [50,] FALSE #&gt; [51,] FALSE #&gt; [52,] FALSE #&gt; [53,] FALSE #&gt; [54,] FALSE #&gt; [55,] FALSE #&gt; [56,] FALSE #&gt; [57,] FALSE #&gt; [58,] FALSE #&gt; [59,] FALSE #&gt; [60,] FALSE #&gt; [61,] FALSE #&gt; [62,] TRUE #&gt; [63,] FALSE #&gt; [64,] FALSE #&gt; [65,] FALSE #&gt; [66,] FALSE #&gt; [67,] FALSE #&gt; [68,] FALSE #&gt; [69,] FALSE #&gt; [70,] FALSE #&gt; [71,] FALSE #&gt; [72,] FALSE #&gt; [73,] FALSE #&gt; [74,] FALSE #&gt; [75,] FALSE #&gt; [76,] FALSE #&gt; [77,] FALSE #&gt; [78,] FALSE #&gt; [79,] FALSE #&gt; [80,] FALSE #&gt; [81,] FALSE #&gt; [82,] FALSE #&gt; [83,] FALSE # Using which() to identify which rows match the logical values (TRUE) and length to count how many species there are which(msleep[,&quot;sleep_total&quot;]&gt;18) #22 37 43 62 --&gt; the rows that contain organisms that sleep more than 18 hrs #&gt; [1] 22 37 43 62 length(which(msleep[,&quot;sleep_total&quot;]&gt;18)) #4 --&gt; number of species that sleep more than 18 hrs #&gt; [1] 4 # which four species are these? msleep[which(msleep[,&quot;sleep_total&quot;]&gt;18),] #&gt; # A tibble: 4 × 11 #&gt; name genus vore order conservation sleep_total sleep_rem sleep_cycle awake #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Big br… Epte… inse… Chir… lc 19.7 3.9 0.117 4.3 #&gt; 2 Thick-… Lutr… carni Dide… lc 19.4 6.6 NA 4.6 #&gt; 3 Little… Myot… inse… Chir… &lt;NA&gt; 19.9 2 0.2 4.1 #&gt; 4 Giant … Prio… inse… Cing… en 18.1 6.1 NA 5.9 #&gt; # ℹ 2 more variables: brainwt &lt;dbl&gt;, bodywt &lt;dbl&gt; # what if we only want to see the bats that sleep more than 18 hours per 24 hour period? msleep[which(msleep[,&quot;sleep_total&quot;]&gt;18 &amp; msleep[,&quot;order&quot;] == &quot;Chiroptera&quot;),] #&gt; # A tibble: 2 × 11 #&gt; name genus vore order conservation sleep_total sleep_rem sleep_cycle awake #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Big br… Epte… inse… Chir… lc 19.7 3.9 0.117 4.3 #&gt; 2 Little… Myot… inse… Chir… &lt;NA&gt; 19.9 2 0.2 4.1 #&gt; # ℹ 2 more variables: brainwt &lt;dbl&gt;, bodywt &lt;dbl&gt; Class Exercise 1 We will be using the iris dataset again which can be loaded with data(iris) and submit code and answers for the following questions: It is important to acknowledge that the field of genetics has been built on eugenics, and Fisher (author of this dataset) was a prominent geneticist and eugenicist. More information about this can be accessed here: https://www.ucl.ac.uk/biosciences/gee/ucl-centre-computational-biology/ronald-aylmer-fisher-1890-1962 Q1. How many irises have sepals less than 5.5 cm? Q2. How many of the irises are in this dataset belong to the species versicolor? 7.3 Plotting in Base R 7.3.1 Scatterplots First let’s work on building a scatterplot. This can be a good first step for visualizing data and is the base plotting visualization in R. plot(msleep$sleep_total~msleep$sleep_rem) # or plot response variable as a function &quot;~&quot; of the predictor variable plot(msleep$sleep_rem~msleep$sleep_total) #you&#39;ll notice this swaps the x and y axis X vs Y When thinking about how to plot the x and y axes on a graph, it is important to think about the research question and which variable is the independent vs dependent variable. Our graph will show us how y changes with x, so we want the x axis to represent the independent variable and the y axis will be the dependent variable. In our graph, we are interested in how rem sleep in mammals changes with the total amount of sleep they get, so we will want the second graph, where sleep_total is on the x (dependent variable) and sleep_rem si on the y (independent variable). Review the lecture slides again if this gets confusing in the homework! There are several different arguments within plotting functions that can be used to customize your plot. col changes color pch changes point character cex changes size type changes type (“l” = line, “p” = points, “b” = both) lty changes line type bty changes (or removes) the border around the plot (“n” = no box, “7” = top + right, “L” = bottom+left, “C” top+left+bottom, “U” = left+bottom+right) You can view different point characters with ?pch There are many color options in R. For some general colors you can write the name (blue, red, green, etc). There are apparently 657 named colors in R (including “slateblue3, and peachpuff4) but you can also use the color hexidecimal code for a given color. There are several comprehensives guides for colors in R online and one of which can be found (here)[https://www.nceas.ucsb.edu/sites/default/files/2020-04/colorPaletteCheatsheet.pdf] Let’s remake the total_sleep against sleep_rem plot and add-in some modifiers #Choose a pch and make the color blue and give it a bottom+left border plot(msleep$sleep_total~msleep$sleep_rem, pch = 16, col=&quot;blue&quot;, bty=&quot;L&quot;) We can change the axes and title labels using “xlab”, “ylab”, and “main” arguments. Let’s add labels to our plot. #Choose a pch and make the color blue and give it a bottom+left border plot(msleep$sleep_total~msleep$sleep_rem, pch = 16, col=&quot;blue&quot;, bty=&quot;L&quot;, xlab=&quot;REM Sleep (hours)&quot;, ylab= &quot;Total Sleep (hours)&quot;) You may want to find out which points are on a plot. You can use identify() in place of plot() to identify specific points within your plot. This function prints out the row numbers for the points that you selected. We can also add lines to an existing plot with ablines(). Let’s add a line fit from a linear model to our plot. #first make a plot plot(msleep$sleep_total~msleep$sleep_rem, pch = 16, col=&quot;blue&quot;, bty=&quot;L&quot;, xlab=&quot;REM Sleep (hours)&quot;, ylab= &quot;Total Sleep (hours)&quot;) #then add a line. The function lm runs a linear model on our x, y values. abline(lm(msleep$sleep_total~msleep$sleep_rem)) You can add a legend to a plot with legend() which needs you to specify the location. To do this, let’s make a cutoff for our points and color them by points above and below the cutoff. We’ll use our subsetting skills from last week. Feel free to review that section (1.3). #start by defining points by whether they are greater than sleep_total 16 and storing #first make a empty column named colors within the msleep dataframe msleep$colors=NA #store the colors &quot;red&quot; or &quot;black&quot; in the color column for the rows that satsify the following criteria. msleep$colors[msleep$sleep_total &gt;= 17] &lt;-&quot;maroon&quot; msleep$colors[msleep$sleep_total &lt; 17] &lt;-&quot;darkgreen&quot; plot(msleep$sleep_total~msleep$sleep_rem, pch = 16, col=msleep$colors, bty=&quot;L&quot;, xlab=&quot;REM Sleep (hours)&quot;, ylab= &quot;Total Sleep (hours)&quot;) 7.3.2 Histograms In addition to scatterplots you can make histograms and boxplots in base R. The same parameter options (pch, col, ylab, xlab, etc) apply for these plots as well as scatterplots. R will automatically plot a barplot if you give to the plot() function a continuous variable and a factor. If you have a vector stored as a character converting it to a factor via as.factor will make a boxplot. #let&#39;s make a histogram of sleep_total and fill it with the color palette rainbow() which needs to know how many colors to use hist(msleep$sleep_total, col=rainbow(10)) #let&#39;s make a boxplot of sleep_total and order making eachone a different color (how would you find out how many unique orders are in msleep?) #using plot #plot(msleep$sleep_total~as.factor(msleep$order), col=rainbow(19)) #this is commented out simply to avoid ploting the same plot twice #or boxplot boxplot(msleep$sleep_total~as.factor(msleep$order), col=rainbow(19)) Another example looking at sleep variation across the different types of consumers (carnivore, herbivore, insectivore and omnivore): plot(msleep$sleep_total~as.factor(msleep$vore),col=rainbow(4), xlab=&quot;REM Sleep (hours)&quot;, ylab= &quot;Total Sleep (hours)&quot;) Class Exercise 2 Explore this dataset of chick weight and identify: how many chicks are in the dataset (sample size) and how many different diets were used in the experiment? Hint **length() will be a useful command! Visualize the relationship of chick weight over time (scatterplot would be useful here!) Visualize how different diets impact the weights of the chicks at the final day of the experiments (a boxplot would be useful here!) Read in the data using data(ChickWeight) # Note: this dataset can also be accessed directly from the ChickWeight package in R # (see ?ChickWeight) data(&quot;ChickWeight&quot;) For all of your figures try using the package R Color Brewer to generate color palettes. Go to http://colorbrewer2.org/ to vizualize palettes. You can choose palettes that are colorblind safe, print friendly, etc. Define a color pallete with 10 colors and re-plot the histogram of the weights of the chicks at the final day of the experiments in these colors Note: if histogram has n breaks and n is less than 10, it will just use first n colors. If n is greater than 10, it will reuse colors. # Install R Color Brewer #install.packages(&quot;RColorBrewer&quot;) library(&quot;RColorBrewer&quot;) 7.4 Plotting with ggplot2 GGPlot is a package that allows you to make a lot of different kinds of plots and has become increasingly popular. There are also many tutorials on how to use ggplot as well as example code that could be modified to fit the data you’re interested in plotting. There is a really helpful cheatsheat (here)[https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf] There is a little bit of a learning curve for ggplot as the syntax is structured differently than base R plotting. One thing that remains the same and is even more noticible in ggplot is the iterative process of building a plot, one aspect at a time. Let’s demonstrate what ggplot can do with this dataset on the Effect of Vitamin C on Tooth Growth in Guinea Pigs. You can also open your dataset with this command which pulls it into a different window with View() #load in the data data(ToothGrowth) #look at the structure of the data str(ToothGrowth) #&gt; &#39;data.frame&#39;: 60 obs. of 3 variables: #&gt; $ len : num 4.2 11.5 7.3 5.8 6.4 10 11.2 11.2 5.2 7 ... #&gt; $ supp: Factor w/ 2 levels &quot;OJ&quot;,&quot;VC&quot;: 2 2 2 2 2 2 2 2 2 2 ... #&gt; $ dose: num 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ... This dataset has three columns, len for length of tooth, supp for supplement provided, either OJ or VC, and dose for amount of the supplement given. OJ was orange juice and VC was abcorbic acid, and they wanted to test how these two delivery methods may change tooth growth, as well as the different doses. Two of our variables are categorical (supp and dose) while tooth length is continuous. What type of data you are working with is important when we think about how to visualize our data. If you do the command ggplot(data=ToothGrowth) you will just see a grey box. In order to tell ggplot what to put in the box we use the aes(). The aes() function stands for aesthetics and will be used to specify our axes and how we want the data grouped. Since we have two categories, dose or supplement, and one continuous variable that we want to see how it varies by those categorical variables, let’s try to plot the amount of tooth growth with the supplement given to the guinea pigs. #we specify which axes we want to be x and y with aes() #we&#39;ll then use geom_point to tell it to make a scatterplot #using the data we specified in the first command ggplot(data=ToothGrowth, aes(x=supp, y=len))+geom_point() This scatterplot visualization isn’t super useful since there are only two supplement types, OJ and VC, and the points for tooth length are just spread across the Y axis. A boxplot would likely be the best way to visualize this data, so let’s try that! There are many types of plots in ggplot that can be called with geom_ including geom_line, geom_boxplot geom_bar and many others! #we specify which axes we want to be x and y with aes() ggplot(ToothGrowth, aes(y=len, x=supp))+ geom_boxplot() What if we want to add color to make the two supplements even more distinguishable from one another? #same graph but add color! ggplot(ToothGrowth, aes(y=len, x=supp, fill= supp))+ geom_boxplot() These are the base formats for plots in ggplot2, so it can be fun to customize the theme, colorscheme etc to make your graphs more specific to your work and easier to interpret. I like to change the background from grey to white so that it is less distracting from the data. All of these things can be modified if we wish. Many of these options can easily be changed with the theme_ functions. Let’s change to a minimal theme which removes the gray background in the back of the plot. Play around with the other themes to see what they change. You can change colors with RcolorBrewer again with scale_fill_brewer() or scale_fill_manual() to choose the two colors. The values=c() part is important when you are using two or more colors! #change the theme ggplot(ToothGrowth, aes(y=len, x=dose, fill= supp))+ geom_boxplot() + scale_fill_manual(values=c(&quot;darkorange&quot;, &quot;lightpink&quot;))+ theme_minimal() Now let’s look at the msleep dataset again with view() and make a plot of total sleep against REM sleep and then group by “vore”. Load the data with the command below: data(msleep) Because vore is a character vector we will need to convert it to a factor for ggplot to be able to use it as a group or a color. This can be easily done with as.factor(). # because our vore vector is a character vector we must convert it to a factor before we can use it to group or color ggplot(msleep, aes(y=sleep_total, x=sleep_rem, group=as.factor(vore), color=as.factor(vore))) +geom_point() +theme_minimal() #&gt; Warning: Removed 22 rows containing missing values or values outside the scale range #&gt; (`geom_point()`). If you use View() to look at our dataset you will see there are some NAs in our vore column which may give you a warning when you go to plot since there is missing data. That looks fine, but we may want to add axis labels and change the legend. The code below does just that and changes the theme. # as we add things to the plot the line can get really long, you can hit enter after the plus sign to start a new line ggplot(msleep, aes(y=sleep_total, x=sleep_rem, group=as.factor(vore), color=as.factor(vore)))+ geom_point()+ labs(y= &quot;Total Sleep (hours)&quot;, x= &quot;REM sleep (hours)&quot;)+ theme_minimal()+ scale_color_manual(name=&quot;Diet&quot;, labels = c(&quot;Carnivore&quot;, &quot;Herbivore&quot;, &quot;Insectivore&quot;, &quot;Omnivore&quot;, &quot;NA&quot;), values = c(&quot;carni&quot;=&quot;pink&quot;, &quot;herbi&quot;=&quot;darkgreen&quot;, &quot;insecti&quot;=&quot;orange&quot;, &quot;omni&quot;=&quot;brown&quot;, &quot;NA&quot;=&quot;grey&quot;)) #&gt; Warning: Removed 22 rows containing missing values or values outside the scale range #&gt; (`geom_point()`). Our plot at this point is getting very clunky. You can assign what we have so far to an object and continue to add parameters without having to copy and paste the whole plot. This can also be useful for saving your plots as images for powerpoint presentations with ggsave(). This will save a photo of your figure on your desktop! #assign to an object plot1&lt;-ggplot(msleep, aes(y=sleep_total, x=sleep_rem, group=as.factor(vore), color=as.factor(vore)))+ geom_point()+ labs(y= &quot;Total Sleep (hours)&quot;, x= &quot;REM sleep (hours)&quot;)+ theme_minimal()+ scale_color_manual(name=&quot;Diet&quot;, labels = c(&quot;Carnivore&quot;, &quot;Herbivore&quot;, &quot;Insectivore&quot;, &quot;Omnivore&quot;, &quot;NA&quot;), values = c(&quot;carni&quot;=&quot;pink&quot;, &quot;herbi&quot;=&quot;darkgreen&quot;, &quot;insecti&quot;=&quot;orange&quot;, &quot;omni&quot;=&quot;brown&quot;, &quot;NA&quot;=&quot;grey&quot;)) plot1 #&gt; Warning: Removed 22 rows containing missing values or values outside the scale range #&gt; (`geom_point()`). ggsave(&quot;plot1.png&quot;,plot1, width=20, height=20, units = &quot;cm&quot;) #&gt; Warning: Removed 22 rows containing missing values or values outside the scale range #&gt; (`geom_point()`). I use ggplot often with data sets that have multiple character vectors and I want to see how they relate to my continuous variables. For example in the iris dataframe we may be interested in looking at the relationship between Sepal.Length and Sepal.Width for each species. This dataset was published by Ronald Fisher in his 1936 paper: “The use of multiple measurements in taxonomic problems”. It has three plant species (setosa, virginica, versicolor) and four morphological traits measured for each sample in centimeters: Sepal.Length, Sepal.Width, Petal.Length and Petal.Width. As I have mentioned before, it is important to acknowledge that the field of genetics has been built on eugenics, and Fisher (author of this dataset) was a prominent geneticist and eugenicist. More information about this can be accessedhere: https://www.ucl.ac.uk/biosciences/gee/ucl-centre-computational-biology/ronald-aylmer-fisher-1890-1962 Iris Diagram for Reference data(iris) ggplot(iris, aes(y=Sepal.Length, x=Sepal.Width, group=Species, color=Species))+ geom_point() + theme_minimal() If you want to add a line of best fit to each population you can do that with geom_smooth() ggplot(iris, aes(y=Sepal.Length, x=Sepal.Width, group=Species, color=Species))+ geom_point()+ geom_smooth(method=&quot;lm&quot;) +theme_minimal() #&gt; `geom_smooth()` using formula = &#39;y ~ x&#39; Finally, if you want to look at each species on it’s own graph at once you can look at all of these together with facet_wrap or facet_grid. ggplot(iris, aes(y=Sepal.Length, x=Sepal.Width, group=Species, color=Species))+ geom_point()+ facet_wrap(~Species)+ geom_smooth(method=&quot;lm&quot;) +theme_minimal() #&gt; `geom_smooth()` using formula = &#39;y ~ x&#39; Class Exercise 3 Go back to the Guinea Pig Tooth Dataset (ToothGrowth) and visualize how the different doses of VC and OJ impact tooth growth. Use facet_wrap() and plot the doses of the treatments within each graph, with three separate graphs for each dose (0.5, 1 and 2) data(ToothGrowth) Plotting the mean values with error bars for several groups can also be useful for data visualization. You can use the function stat_summary to find the mean and error around that mean for the given grouping. Now let’s look again at the Chick Weight dataset! Here’s a plot looking at the mean chickweight by diet. ggplot(ChickWeight, aes(x=Time, y=weight, group=Diet, color=Diet))+ stat_summary(fun=mean, geom=&quot;point&quot;, size=1)+ stat_summary(fun=mean, geom=&quot;line&quot;, linewidth=1)+ stat_summary(fun.data = mean_se, geom = &quot;errorbar&quot;, aes(width=0.1), linewidth=0.5) +theme_minimal() 7.5 For loops and the apply family of functions A few useful commands: function(), is.na, which, var, length, for(){ }, points, print, paste, plot, unique, sample for loops: In many languages, the best way to repeat a calculation is to use a for-loop: For example, we could square each number 1 to 10 squares = rep(NA, 10) # use rep to create a vector length 10 of NAs to store the result for (i in 1:10) { # for loop squares[i] = i^2 } squares #&gt; [1] 1 4 9 16 25 36 49 64 81 100 7.6 Group Work Activity: Palmer Penguins! For this week’s activity we will be working with the dataset palmerpenguins https://allisonhorst.github.io/palmerpenguins/ First install the package with the data. There are two datasets, penguins and penguins_raw. Learn more about each dataset by doing ?penguins or ?penguins_raw in your console. We will be working with the penguins dataset for the homework. Use install.packages(\"palmerpenguins\") To download the data. It might take a second to download! After it is downloaded check it is there and prepare the dataset: library(palmerpenguins) #&gt; Warning: package &#39;palmerpenguins&#39; was built under R version 4.4.1 data(package = &#39;palmerpenguins&#39;) For this week your goal is to do the following: Without using the view() command, report the names of the unique species in this dataset and how many species there are. Using the penguins dataset, how does bill length vary across the three species? Consider the best way to visualize this figure, is a scatterplot or a boxplot a better fit for showing the variation between the species? Interpret the main takeaway from this figure in one to two sentences. Again using the penguins dataset visualize the relationship between bill length and bill depth across the three species. This should all be in one single graph with a specific color and a line of best fit for each of the species. Interpret the main takeaway from this figure in one to two sentences. Copy the lines in your script used to answer all three of these questions into your canvas submission. Be sure to include the answers for question 1, interpretations for the figures and the two figures you made as well. Artwork by allison_horst 7.7 Key Points Subsetting data is an important part of data exploration Making plots in R can be really fun, but is important to think about your audience and what you want your plot to convey when making it! For example, scatterplots and boxplots are useful for visualizing different types of data. You can plot in base R or ggplot, but ggplot can give you more room to customize your figures to your liking Class Exercise Solutions Class Exercises: Solutions Exercise 1 How many irises have sepals less than 5.5 cm? remember TRUE’s are 1 and FALSE’s are 0 and which() will only return the index of TRUE values, so we’re counting how many there are sum(iris[,&#39;Sepal.Length&#39;]&lt;5.5) #&gt; [1] 52 length(which(iris[,&#39;Sepal.Length&#39;]&lt;5.5)) #&gt; [1] 52 How many of the irises are in this dataset belong to the species versicolor? sum(iris[,&#39;Species&#39;]==&#39;versicolor&#39;) #&gt; [1] 50 table(iris[,&#39;Species&#39;]) ## this gets us all three species #&gt; #&gt; setosa versicolor virginica #&gt; 50 50 50 Exercise 2 sample size and different diets in the experiment length(unique(ChickWeight$Chick)) #&gt; [1] 50 length(unique(ChickWeight$Diet)) #&gt; [1] 4 scatterplot of the relationship of chicken weight over time plot(ChickWeight$weight ~ ChickWeight$Time, xlab = &quot;Time (days)&quot;, ylab = &quot;Weight (gm)&quot;) Create a boxplot where the x-axis represents the different diets and the y-axis is the weights of the chicks at the final day of the experiments my.new = ChickWeight[ChickWeight$Time == max(ChickWeight$Time), ] boxplot(weight ~ Diet, data = my.new, xlab = &quot;Diet&quot;, ylab = &quot;Weight (gm)&quot;, main = &quot;Final weights given diet type&quot;, col = c(&quot;red&quot;, &quot;blue&quot;, &quot;orange&quot;, &quot;green&quot;)) library(RColorBrewer) my.colors = brewer.pal(10, &quot;Paired&quot;) hist(ChickWeight$weight[ChickWeight$Time == max(ChickWeight$Time)], xlab = &quot;Weight (gm)&quot;,main = &quot;Weights at final day of experiment&quot;, col = my.colors) Exercise 3 ggplot(ToothGrowth, aes(y=len, x=supp, fill= supp))+ geom_boxplot() + facet_wrap(~dose)+ scale_fill_manual(values=c(&quot;darkorange&quot;, &quot;lightpink&quot;))+ theme_minimal() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
