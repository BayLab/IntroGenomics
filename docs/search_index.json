[["week-2--working-with-files.html", " 3 Week 2- Working with files 3.1 Questions to Answer: 3.2 Navigational shortcuts 3.3 Our data set: FASTQ files 3.4 Wildcards Exercise Solution Exercise Solution 3.5 Command History Exercise Solution 3.6 Key Points", " 3 Week 2- Working with files We will be following some of the data carpentry tutorial (Copyright 2016 @ Software Carpentry) “Introduction to the command line for genomics”. We have made some modifications to the data carpentry tutorial to fit our course. 3.1 Questions to Answer: What are some navigational shortcuts I can use to make my work more efficient? How can I perform operations on files outside of my working directory? How can I work with hidden directories and hidden files? How can I control who has permission to modify a file? How can I repeat recently used commands? 3.2 Navigational shortcuts The root directory is the highest level directory in your file system and contains files that are important for your computer to perform its daily work. While you will be using the root (/) at the beginning of your absolute paths, it is important that you avoid working with data in these higher-level directories, as your commands can permanently alter files that the operating system needs to function. In many cases, trying to run commands in root directories will require special permissions which will be discussed later, so it’s best to avoid them and work within your home directory. Dealing with the home directory is very common. The tilde character, ~, is a shortcut for your home directory. In our case, the root directory is two levels above our home directory, so cd or cd ~ will take you to /home/margeno and cd / will take you to /. Navigate to your home directory if you aren’t there already and enter the command: $ cd $ ls ~ Desktop Mambaforge-Linux-x86_64.sh Public get-pip.py miniconda.sh Documents Music Templates mambaforge ondemand Downloads Pictures Videos miniconda This prints the contents of your home directory, without you needing to type the full path. The commands cd, and cd ~ are very useful for quickly navigating back to your home directory. We will be using the ~ character in later lessons to specify our home directory. We can make the ls output more comprehensible by using the flag -F, which tells ls to add a trailing / to the names of directories. First make sure you are in the eve198-genomics directory by printing your working directory $ cd /group/rbaygrp/eve198-genomics $ pwd /group/rbaygrp/eve198-genomics Then type ls -F. It should show your and all your classmates’ directories. $ ls -F mlarmstrong/ Anything with a “/” after it is a directory. Things with a “*” after them are programs. If there are no decorations, it’s a file. ls has lots of other options. To find out what they are, we can type $ man ls man (short for manual) displays detailed documentation (also referred as man page or man file) for bash commands. It is a powerful resource to explore bash commands, understand their usage and flags. Some manual files are very long. You can scroll through the file using your keyboard’s down arrow or use the Space key to go forward one page and the b key to go backwards one page. When you are done reading, hit q to quit. Use the -l option for the ls command to display more information for each item in the directory. What is one piece of additional information this long format gives you that you don’t see with the bare ls command? $ ls -l No one can possibly learn all of these arguments, that’s what the manual page is for. You can (and should) refer to the manual page or other help files as needed. Let’s navigate to our individual folders: $ cd `yourdirectory` $ ls Now let’s download some data to work with! 3.3 Our data set: FASTQ files There are two main ways to do this. We can use the command wget which needs a link to the file that we want to download. If there’s a file saved on a website somewhere (anywhere on the internet) wget will download it for you. If our data file is on github, which is where most of our data will be stored, we’ll use the command git-clone In this example we’re going to download all the material in our individual directory $ wget https://raw.githubusercontent.com/mlarmstrong/IntroGenomics_Data/main/week2.tar.gz # use the tar command to uncompress the file. This will also automatically make a week2 directory in your directory tar -xzvf week2.tar.gz Check out what is in this directory: untrimmed_fastq sra_metadata TableS2_QTL_Bay_2017.txt Now that we know how to navigate around our directory structure, let’s start working with our sequencing files. We did a sequencing experiment and have two results files, which are stored in our untrimmed_fastq directory. 3.4 Wildcards Navigate to your untrimmed_fastq directory in your individual directory $ cd ~/group/rbaygrp/eve198-genomics/week2/untrimmed_fastq We are interested in looking at the FASTQ files in this directory. We can list all files with the .fastq extension using the command: $ ls *.fastq SRR097977.fastq SRR098026.fastq The * character is a special type of character called a wildcard, which can be used to represent any number of any type of character. Thus, *.fastq matches every file that ends with .fastq. This command: $ ls *977.fastq SRR097977.fastq lists only the file that ends with 977.fastq. This command: $ ls /usr/bin/*.sh /usr/bin/gettext.sh /usr/bin/rescan-scsi-bus.sh Lists every file in /usr/bin that ends in the characters .sh. Note that the output displays full paths to files, since each result starts with /. This directory contains two files with .fastq extensions. FASTQ is a format for storing information about sequencing reads and their quality. We will be learning more about FASTQ files in a later lesson. Exercise Do each of the following tasks from your current directory using a single ls command for each: List all of the files in /usr/bin that start with the letter ‘c’. List all of the files in /usr/bin that contain the letter ‘a’. List all of the files in /usr/bin that end with the letter ‘o’. Bonus: List all of the files in /usr/bin that contain the letter ‘a’ or the letter ‘c’. Hint: The bonus question requires a Unix wildcard that we haven’t talked about yet. Try searching the internet for information about Unix wildcards to find what you need to solve the bonus problem. Solution Solution ls /usr/bin/c* ls /usr/bin/*a* ls /usr/bin/*o Bonus: ls /usr/bin/*[ac]*   Exercise echo is a built-in shell command that writes its arguments, like a line of text to standard output. The echo command can also be used with pattern matching characters, such as wildcard characters. Here we will use the echo command to see how the wildcard character is interpreted by the shell. $ echo *.fastq SRR097977.fastq SRR098026.fastq The * is expanded to include any file that ends with .fastq. We can see that the output of echo *.fastq is the same as that of ls *.fastq. What would the output look like if the wildcard could not be matched? Compare the outputs of echo *.missing and ls *.missing. Solution Solution $ echo *.missing *.missing $ ls *.missing ls: cannot access &#39;*.missing&#39;: No such file or directory   3.5 Command History If you want to repeat a command that you’ve run recently, you can access previous commands using the up arrow on your keyboard to go back to the most recent command. Likewise, the down arrow takes you forward in the command history. A few more useful shortcuts: Ctrl+C will cancel the command you are writing, and give you a fresh prompt. Ctrl+R will do a reverse-search through your command history. This is very useful. Ctrl+L or the clear command will clear your screen. You can also review your recent commands with the history command, by entering: $ history to see a numbered list of recent commands. You can reuse one of these commands directly by referring to the number of that command. For example, if your history looked like this: 259 ls * 260 ls /usr/bin/*.sh 261 ls *R1*fastq then you could repeat command #260 by entering: $ !260 Type ! (exclamation point) and then the number of the command from your history. You will be glad you learned this when you need to re-run very complicated commands. For more information on advanced usage of history, read section 9.3 of Bash manual. Exercise Find the line number in your history for the command that listed all the .sh files in /usr/bin. Rerun that command. Solution Solution First type history. Then use ! followed by the line number to rerun that command.   ``` 3.6 Key Points The /, ~, and .. characters represent important navigational shortcuts. You can view file permissions using ls -l and change permissions using chmod. The history command and the up arrow on your keyboard can be used to repeat recently used commands. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
